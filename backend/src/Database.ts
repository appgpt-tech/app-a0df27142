//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { QuestionsEntity } from './db/Questions.entity';
import { AnswersEntity } from './db/Answers.entity';
import { CategoriesEntity } from './db/Categories.entity';
import { DifficultyLevelsEntity } from './db/DifficultyLevels.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      QuestionsEntity,
      AnswersEntity,
      CategoriesEntity,
      DifficultyLevelsEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      Questions: [
        {
          questionId: 1,
          content: 'content 1',
          category: 1,
          difficultyLevel: 1,
          dateCreated: '2024-09-07T01:37:00.834Z',
          id: 29,
        },
        {
          questionId: 2,
          content: 'content 2',
          category: 2,
          difficultyLevel: 2,
          dateCreated: '2024-02-10T22:11:15.624Z',
          id: 40,
        },
        {
          questionId: 3,
          content: 'content 3',
          category: 3,
          difficultyLevel: 3,
          dateCreated: '2024-07-01T23:17:14.141Z',
          id: 25,
        },
        {
          questionId: 4,
          content: 'content 4',
          category: 4,
          difficultyLevel: 4,
          dateCreated: '2023-08-21T23:50:21.824Z',
          id: 99,
        },
        {
          questionId: 5,
          content: 'content 5',
          category: 5,
          difficultyLevel: 5,
          dateCreated: '2023-12-26T21:15:37.009Z',
          id: 91,
        },
      ],
      Answers: [
        {
          answerId: 1,
          questionId: 1,
          content: 'content 1',
          explanation: 'explanation 1',
          dateCreated: '2024-07-12T08:50:27.110Z',
          id: 53,
        },
        {
          answerId: 2,
          questionId: 2,
          content: 'content 2',
          explanation: 'explanation 2',
          dateCreated: '2023-11-03T18:23:17.803Z',
          id: 33,
        },
        {
          answerId: 3,
          questionId: 3,
          content: 'content 3',
          explanation: 'explanation 3',
          dateCreated: '2024-01-07T01:47:32.027Z',
          id: 27,
        },
        {
          answerId: 4,
          questionId: 4,
          content: 'content 4',
          explanation: 'explanation 4',
          dateCreated: '2025-02-07T03:41:23.005Z',
          id: 99,
        },
        {
          answerId: 5,
          questionId: 5,
          content: 'content 5',
          explanation: 'explanation 5',
          dateCreated: '2023-08-29T04:52:15.448Z',
          id: 59,
        },
      ],
      Categories: [
        { categoryId: 1, name: 'name 1', description: 'description 1', id: 47 },
        { categoryId: 2, name: 'name 2', description: 'description 2', id: 1 },
        { categoryId: 3, name: 'name 3', description: 'description 3', id: 62 },
        { categoryId: 4, name: 'name 4', description: 'description 4', id: 71 },
        { categoryId: 5, name: 'name 5', description: 'description 5', id: 81 },
      ],
      DifficultyLevels: [
        {
          difficultyId: 1,
          name: 'name 1',
          description: 'description 1',
          id: 82,
        },
        {
          difficultyId: 2,
          name: 'name 2',
          description: 'description 2',
          id: 30,
        },
        {
          difficultyId: 3,
          name: 'name 3',
          description: 'description 3',
          id: 53,
        },
        {
          difficultyId: 4,
          name: 'name 4',
          description: 'description 4',
          id: 15,
        },
        {
          difficultyId: 5,
          name: 'name 5',
          description: 'description 5',
          id: 93,
        },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('QuestionsEntity', data.Questions);
      await this.SeedResource('AnswersEntity', data.Answers);
      await this.SeedResource('CategoriesEntity', data.Categories);
      await this.SeedResource('DifficultyLevelsEntity', data.DifficultyLevels);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
